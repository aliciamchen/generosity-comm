var round = function (num, precision) {
  Number.parseFloat(num.toFixed(precision));
};

var params = {
  beta: argv.beta,
  actions: ["own", "other"],
  comm_weight: argv.comm_weight,
  fairness_cost: argv.fairness_weight,
  condition: argv.condition,
  w_other_values: map(function (x) {
    round(x, 2);
  }, _.range(0, 1, 0.01)),
  w_other_prior: { a: argv.beta_a, b: argv.beta_b },
};

var Beta_disc = cache(function (hypers) {
  return Infer({ method: "enumerate" }, function () {
    var n = uniformDraw(_.range(0, 1, 0.01));
    var bta = Beta({
      a: hypers.a == 0 ? 1 : hypers.a,
      b: hypers.b == 0 ? 1 : hypers.b,
    });
    factor(bta.score(n));
    return round(n, 2);
  });
});

var getOpposite = function (action) {
  return action == "own" ? "other" : "own";
};

var benefits = function (scenario) {
  var scenario_benefits = {
    coffee: {
      own: 3,
      other: 5,
    },
  };
  return scenario_benefits[scenario];
};

var getActionBenefits = function (scenario, action, w_other) {
  if (action == "own") {
    return (
      (1 - w_other) * benefits(scenario)["own"] +
      w_other * benefits(scenario)["other"]
    );
  } else {
    return (
      (1 - w_other) * benefits(scenario)["other"] +
      w_other * benefits(scenario)["own"]
    );
  }
};

var getCumulativeActionBenefits = function (scenario, actions, w_other) {
  return reduce(
    function (a, b) {
      return a + b;
    },
    0,
    map(function (action) {
      return getActionBenefits(scenario, action, w_other);
    }, actions)
  );
};

var getEqualityCost = function (
  scenario,
  past_actions,
  action,
  equality_cost_weight
) {
  var speakerTotalBenefit =
    getCumulativeActionBenefits(scenario, past_actions, 0) +
    benefits(scenario)[action];
  var listenerTotalBenefit =
    getCumulativeActionBenefits(
      scenario,
      map(function (a) {
        return getOpposite(a);
      }, past_actions),
      0
    ) + benefits(scenario)[getOpposite(action)];
  var cost = Math.abs(speakerTotalBenefit - listenerTotalBenefit);
  return equality_cost_weight * cost;
};

var base_speaker = function (
  scenario,
  past_actions,
  w_other,
  equality_cost_weight
) {
  return Infer({ method: "enumerate" }, function () {
    var action = uniformDraw(params.actions); // "own" or "other", "own" means that the actor is generous

    var getUtility = function (past_actions, action) {
      return (
        getActionBenefits(scenario, action, w_other) -
        getEqualityCost(scenario, past_actions, action, equality_cost_weight)
      );
    };

    factor(params.beta * getUtility(past_actions, action));
    return action;
  });
};

var base_listener = function (
  scenario,
  past_actions,
  speaker_action,
  equality_cost_weight
) {
  return Infer({ method: "enumerate" }, function () {
    var w_other = sample(
      Beta_disc({ a: params.w_other_prior.a, b: params.w_other_prior.b })
    );
    var getUtility = function () {
      return (
        base_speaker(
          scenario,
          past_actions,
          w_other,
          equality_cost_weight
        ).score(speaker_action) +
        getCumulativeActionBenefits(scenario, past_actions, w_other)
      );
    };
    factor(getUtility());
    return w_other;
  });
};

var communicative_speaker = function (
  scenario,
  past_actions,
  w_other,
  equality_cost_weight,
  comm_weight
) {
  return Infer({ method: "enumerate" }, function () {
    var action = uniformDraw(params.actions); // "own" or "other", "own" means that the actor is generous

    var getUtility = function (action) {
      var surprisal = base_listener(
        scenario,
        past_actions,
        action,
        equality_cost_weight
      ).score(0.5); // communicate equal weights
      return (
        // getCumulativeActionBenefits(scenario, past_actions, w_other) +
        getActionBenefits(scenario, action, w_other) -
        getEqualityCost(scenario, past_actions, action, equality_cost_weight) +
        comm_weight * surprisal
      );
    };

    factor(params.beta * getUtility(action));
    return action;
  });
};

if (params.condition == "vary_base_weights") {
  // vary speaker's weight on listener's utility, and also weight on surprisal
  var f = csv.open(
    "./output/vary_base_weights/" + // implement vary beta prior logic
      "beta" +
      params.beta +
      "_a" +
      params.w_other_prior.a +
      "b" +
      params.w_other_prior.b +
      "_cw" +
      params.comm_weight.toFixed(1) +
      ".csv"
  );
  csv.writeLine(
    "beta,prior_a,prior_b,fairness_weight,comm_weight,first_action,w_other,p_own,p_other,p_alternation",
    f
  );

  map(
    function (w_other) {
      csv.writeLine(
        [
          params.beta,
          params.w_other_prior.a,
          params.w_other_prior.b,
          params.fairness_cost,
          params.comm_weight,
          "other",
          w_other,
          Math.exp(
            communicative_speaker(
              "coffee",
              ["other"],
              w_other,
              params.fairness_cost,
              params.comm_weight
            ).score("own")
          ),
          Math.exp(
            communicative_speaker(
              "coffee",
              ["other"],
              w_other,
              params.fairness_cost,
              params.comm_weight
            ).score("other")
          ),
          Math.exp(
            communicative_speaker(
              "coffee",
              ["other"],
              w_other,
              params.fairness_cost,
              params.comm_weight
            ).score("own")
          ),
        ].join(","),
        f
      );
    },
    map(function (x) {
      round(x, 2);
    }, _.range(0, 1.1, 0.1))
  );

  map(
    function (w_other) {
      csv.writeLine(
        [
          params.beta,
          params.w_other_prior.a,
          params.w_other_prior.b,
          params.fairness_cost,
          params.comm_weight,
          "own",
          w_other,
          Math.exp(
            communicative_speaker(
              "coffee",
              ["own"],
              w_other,
              params.fairness_cost,
              params.comm_weight
            ).score("own")
          ),
          Math.exp(
            communicative_speaker(
              "coffee",
              ["own"],
              w_other,
              params.fairness_cost,
              params.comm_weight
            ).score("other")
          ),
          Math.exp(
            communicative_speaker(
              "coffee",
              ["own"],
              w_other,
              params.fairness_cost,
              params.comm_weight
            ).score("other")
          ),
        ].join(","),
        f
      );
    },
    map(function (x) {
      round(x, 2);
    }, _.range(0, 1.1, 0.1))
  );

  csv.close(f);
}
